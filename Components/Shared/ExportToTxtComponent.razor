@inject IJSRuntime Js

<div class="export-container">
    <button class="export-button" @onclick="() => _showExportOptions = true" disabled="@_isExporting">
        @if (_isExporting)
        {
            <FluentIcon Value="@(new Icons.Filled.Size20.SpinnerIos())"
                        Color="Color.Custom"
                        CustomColor="var(--on-primary)"/>
            <span>Wird exportiert...</span>
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownload())"
                        Color="Color.Custom"
                        CustomColor="var(--on-primary)"/>
            <span>Als .txt exportieren</span>
        }
    </button>

    @if (_showExportOptions)
    {
        <div class="export-options-modal">
            <div class="export-options-content">
                <h3>Export Optionen</h3>
                <p>Wie möchtest du deine Notiz exportieren?</p>
                
                <div class="export-option" @onclick="() => ExportWithOption(true)">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Code())" 
                               Color="Color.Custom"
                               CustomColor="var(--primary)"/>
                    <div>
                        <strong>Preserve Markdown</strong>
                        <small>Export with original Markdown formatting</small>
                    </div>
                </div>
                
                <div class="export-option" @onclick="() => ExportWithOption(false)">
                    <FluentIcon Value="@(new Icons.Regular.Size20.TextParagraph())" 
                               Color="Color.Custom"
                               CustomColor="var(--primary)"/>
                    <div>
                        <strong>Plain Text</strong>
                        <small>Export as readable text without formatting</small>
                    </div>
                </div>
                
                <button class="cancel-export" @onclick="() => _showExportOptions = false">
                    Cancel
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? MarkdownText { get; set; }
    [Parameter] public string? NoteTitle { get; set; }
    [Parameter] public MarkdownPipeline? Pipeline { get; set; }

    private bool _isExporting = false;
    private bool _showExportOptions = false;

    private async Task ExportWithOption(bool preserveMarkdown)
    {
        _showExportOptions = false;
        await ExportAsTxt(preserveMarkdown);
    }

    private async Task ExportAsTxt(bool preserveMarkdown = false)
    {
        if (string.IsNullOrWhiteSpace(MarkdownText))
        {
            await Toast.Make("Kein Text zum Exportieren vorhanden", ToastDuration.Short, 10).Show();
            return;
        }

        _isExporting = true;
       
        try
        {
            var content = preserveMarkdown 
                ? MarkdownText 
                : await Task.Run(() => ConvertMarkdownToPlainText(MarkdownText));
                
            var filename = $"{SanitizeFileName(NoteTitle ?? "untitled")}.txt";
           
            await Js.InvokeVoidAsync("markdownEditorUtils.exportAsTxt", filename, content);
            await Toast.Make($"Text erfolgreich als {(preserveMarkdown ? "Markdown" : "Plain Text")} exportiert", 
                           ToastDuration.Short, 10).Show();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            await Toast.Make("Fehler beim Exportieren", ToastDuration.Short, 10).Show();
        }
        finally
        {
            _isExporting = false;
        }
    }

    private string ConvertMarkdownToPlainText(string markdown)
    {
        if (string.IsNullOrEmpty(markdown))
            return string.Empty;

        // Improved plain text conversion that better preserves structure
        var html = Markdown.ToHtml(markdown, Pipeline);

        // Convert headings
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<h(\d)>(.*?)</h\d>",
            (match) => {
                var level = int.Parse(match.Groups[1].Value);
                var text = match.Groups[2].Value;
                var underline = new string(level <= 2 ? '=' : '-', text.Length);
                return $"\n{text}\n{underline}\n";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert lists with proper indentation
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<li>(.*?)</li>",
            (match) => {
                var text = match.Groups[1].Value;
                // Detect if it's in an ordered list by checking parent elements
                var isOrdered = match.Value.Contains("<ol>");
                return $"\n- {text}";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert blockquotes with proper indentation
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote>(.*?)</blockquote>",
            (match) => {
                var text = match.Groups[1].Value;
                // Remove any HTML tags from the quote
                text = System.Text.RegularExpressions.Regex.Replace(
                    text, 
                    "<[^>]*(>|$)", 
                    string.Empty
                );
                // Add > prefix to each line
                return "\n" + string.Join("\n", 
                    text.Split('\n')
                        .Select(line => $"> {line.Trim()}"))
                    + "\n";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert code blocks
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<pre><code>(.*?)</code></pre>",
            (match) => {
                var code = match.Groups[1].Value;
                return $"\n```\n{code}\n```\n";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert inline code
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<code>(.*?)</code>",
            (match) => {
                var code = match.Groups[1].Value;
                return $"`{code}`";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert images
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<img.*?alt=""(.*?)"".*?src=""(.*?)"".*?>",
            (match) => {
                var alt = match.Groups[1].Value;
                var src = match.Groups[2].Value;
                return $"[Image: {alt}]({src})";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert links
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<a.*?href=""(.*?)"".*?>(.*?)</a>",
            (match) => {
                var href = match.Groups[1].Value;
                var text = match.Groups[2].Value;
                return $"[{text}]({href})";
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline
        );

        // Convert remaining HTML to plain text
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            "<[^>]*(>|$)",
            string.Empty
        );

        // Clean up whitespace
        html = WebUtility.HtmlDecode(html)
            .Replace("\r", "")
            .Replace("\n\n\n", "\n\n")
            .Trim();

        return html;
    }

    private string SanitizeFileName(string fileName)
    {
        var invalidChars = System.Text.RegularExpressions.Regex.Escape(new string(System.IO.Path.GetInvalidFileNameChars()));
        var invalidRegStr = string.Format(@"([{0}]*\.+$)|([{0}]+)", invalidChars);
        return System.Text.RegularExpressions.Regex.Replace(fileName, invalidRegStr, "_");
    }
}