@page "/"
@inject SqliteConnector Db
@inject NavigationManager Navigation
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

<div class="app-container">
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Notizen</h2>
        </div>
        <nav class="sidebar-nav">
            <button class="sidebar-item active" @onclick="DisplayAllFavorites">
                <FluentIcon Value="@(new Icons.Regular.Size20.Notebook())"/>
                <span>Alle Ordner</span>
            </button>
            <button class="sidebar-item @(_showFavoritesOnly ? "active" : "")" @onclick="DisplayAllFavorites">
                <FluentIcon Value="@(new Icons.Regular.Size20.Star())"/>
                <span>Favoriten</span>
            </button>
        </nav>
    </div>

    <div class="main-content">
        <div class="content-header">
            <h3>@(_showFavoritesOnly ? "Favoriten" : "Alle Ordner")</h3>
            <div class="search-box">
                <FluentIcon Value="@(new Icons.Regular.Size20.Search())"/>
                <input type="text"
                       placeholder="Ordner suchen..."
                       @bind="_searchTerm"
                       @oninput="OnSearchInput"/>
            </div>

            <div class="mobile-filter">
                <div class="filter-hint">Ordner filtern:</div>
                <div class="filter-options">
                    <button class="filter-button @(_showFavoritesOnly ? "active" : "")"
                            @onclick="ToggleFavoritesFilter">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Star())"/>
                        <span>Favoriten</span>
                    </button>
                </div>
            </div>
        </div>

        @if (_folders.Any())
        {
            <div class="notes-grid">
                @foreach (var folder in _folders)
                {
                    <div class="note-card" @onclick="() => ToggleExpand(folder)">
                        <div class="note-card-header">
                            <button>
                                <FluentIcon Value="@(new Icons.Regular.Size12.ArrowDown())"/>
                            </button>
                            <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                            <h3>@folder.Folder.Name</h3>

                            <button class="icon-button" @onclick="() => ToggleFavorite(folder.Folder)"
                                    @onclick:stopPropagation="true" title="Toggle Favorite">
                                @if (folder.Folder.IsFavorite)
                                {
                                    <FluentIcon Value="@(new Icons.Filled.Size24.Save())"/>
                                }
                                else
                                {
                                    <FluentIcon Value="new Icons.Regular.Size20.Star()"/>
                                }
                            </button>

                            <div class="note-actions">
                                <button class="icon-button" @onclick="() => ToggleMenu(folder.Folder.Id)"
                                        @onclick:stopPropagation="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.MoreVertical())"/>
                                </button>
                            </div>
                        </div>

                        @if (folder.IsExpanded && folder.Subfolders.Any())
                        {
                            <div class="subfolders-list">
                                @foreach (var subfolder in folder.Subfolders)
                                {
                                    <div class="subfolder-item" @onclick="() => NavigateToSubfolder(subfolder)">
                                        <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                                        <span>@subfolder.Name</span>
                                        <button class="icon-button small" @onclick="() => DeleteSubfolder(subfolder.Id)"
                                                @onclick:stopPropagation="true">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())"/>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <FluentIcon Value="@(new Icons.Regular.Size48.Note())"/>
                <h2>Noch keine Ordner</h2>
                <p>Du musst einen neuen Ordner kreieren, um deine Notizen bearbeiten zu können.</p>
                <button class="primary-button" @onclick="ShowDialog">
                    <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Regular.Size20.Add())"/>
                    <span>Neuer Odner</span>
                </button>
            </div>
        }
    </div>

    <button class="fab" @onclick="ShowDialog">
        <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Color="Color.Lightweight"/>
    </button>

    @if (_showDialog)
    {
        <div class="modal-backdrop" @onclick="CloseDialog">
            <div class="modal" @onclick:stopPropagation>
                <div class="modal-header">
                    <h3>Neuer Ordner</h3>
                    <button class="icon-button" @onclick="CloseDialog">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-field">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                        <input @bind="_newFolderName" placeholder="Name des Ordners" @onkeyup="HandleKeyUp"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="text-button" @onclick="CloseDialog">Abbrechen</button>
                    <button class="text-button primary" @onclick="SaveFolderAsync"
                            disabled="@string.IsNullOrWhiteSpace(_newFolderName)">Kreieren
                    </button>
                </div>
            </div>
        </div>
    }

    @if (_showSubfolderDialog)
    {
        <div class="modal-backdrop" @onclick="CloseSubfolderDialog">
            <div class="modal" @onclick:stopPropagation>
                <div class="modal-header">
                    <h3>Neuer Unterordner</h3>
                    <button class="icon-button" @onclick="CloseSubfolderDialog">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-field">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                        <input @bind="_newSubfolderName" placeholder="Name des Unterordners..."
                               @onkeyup="HandleSubfolderKeyUp"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="text-button" @onclick="CloseSubfolderDialog">
                        Abbrechen
                    </button>
                    <button class="text-button primary" @onclick="SaveSubfolderAsync"
                            disabled="@string.IsNullOrWhiteSpace(_newSubfolderName)">
                        Kreieren
                    </button>
                </div>
            </div>
        </div>
    }

    @if (_activeMenuId != null)
    {
        var folderWithSubfoldersForMenu = _folders.FirstOrDefault(fws => fws.Folder.Id == _activeMenuId);
        if (folderWithSubfoldersForMenu != null)
        {
            var folderObject = folderWithSubfoldersForMenu.Folder;
            <div class="modal-backdrop" @onclick="CloseMenu">
                <div class="modal actions-menu-popup-modal" @onclick:stopPropagation>
                    <div class="modal-header">
                        <h3>Was möchtest du für @folderObject.Name machen?</h3>
                        <button class="icon-button" @onclick="CloseMenu">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="actions-menu-items-container">
                            <button class="modal-menu-item" @onclick="() => ShowSubfolderDialog(folderObject.Id)">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Add())"/>
                                <span>Neuer Unterordner hinfügen</span>
                            </button>
                            <button class="modal-menu-item danger" @onclick="() => DeleteFolder(folderObject.Id)">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Delete())"/>
                                <span>Ordner löschen</span>
                            </button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="text-button" @onclick="CloseMenu">
                            Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@if (_showDialog)
{
    <div class="modal-backdrop" @onclick="CloseDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Neuer Ordner</h3>
                <button class="icon-button" @onclick="CloseDialog">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                    <input @bind="_newFolderName" placeholder="Name des Ordners..." @onkeyup="HandleKeyUp"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="SaveFolderAsync"
                        disabled="@string.IsNullOrWhiteSpace(_newFolderName)">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@if (_showSubfolderDialog)
{
    <div class="modal-backdrop" @onclick="CloseSubfolderDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Neuer Unterordner</h3>
                <button class="icon-button" @onclick="CloseSubfolderDialog">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Folder())"/>
                    <input @bind="_newSubfolderName" placeholder="Name des Unterordners..."
                           @onkeyup="HandleSubfolderKeyUp"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseSubfolderDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="SaveSubfolderAsync"
                        disabled="@string.IsNullOrWhiteSpace(_newSubfolderName)">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@if (_showDialog)
{
    <div class="dialog-backdrop" @onclick="CloseDialog">
        <div class="dialog-container" @onclick:stopPropagation>
            <div class="dialog-header">
                <h2>Ordner kreieren</h2>
            </div>
            <div class="dialog-body">
                <div class="input-container">
                    <input class="input"
                           @bind="_newFolderName"
                           placeholder="Name des ordners..."
                           @onkeyup="HandleKeyUp"/>
                    <div class="underline"></div>
                </div>
            </div>
            <div class="dialog-footer">
                <button class="btn text-btn" @onclick="CloseDialog">Abbrechen</button>
                <button class="btn text-btn primary" @onclick="SaveFolderAsync"
                        disabled="@string.IsNullOrWhiteSpace(_newFolderName)">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@if (_showSubfolderDialog)
{
    <div class="dialog-backdrop" @onclick="CloseSubfolderDialog">
        <div class="dialog-container" @onclick:stopPropagation>
            <div class="dialog-header">
                <h2>Unterordner kreieren</h2>
            </div>
            <div class="dialog-body">
                <div class="input-container">
                    <input class="input"
                           @bind="_newSubfolderName"
                           placeholder="Name des Unterordners..."
                           @onkeyup="HandleSubfolderKeyUp"/>
                    <div class="underline"></div>
                </div>
            </div>
            <div class="dialog-footer">
                <button class="btn text-btn" @onclick="CloseSubfolderDialog">Abbrechen</button>
                <button class="btn text-btn primary" @onclick="SaveSubfolderAsync"
                        disabled="@string.IsNullOrWhiteSpace(_newSubfolderName)">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<FolderWithSubfolders> _folders = [];
    private string _newFolderName = string.Empty;
    private string _newSubfolderName = string.Empty;
    private bool _showDialog = false;
    private bool _showSubfolderDialog = false;
    private int? _activeMenuId = null;
    private bool _showFavoritesOnly = false;
    private int? _currentParentFolderId = null;
    private string _searchTerm = string.Empty;
    private List<FolderModel> _allFolders = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadAllFolders();
    }
   
    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterFolders();
    }
   
    private async Task LoadAllFolders()
    {
        _allFolders = await Db.GetFoldersAsync() ?? [];
        await FilterFolders();
    }

    private void ToggleMenu(int folderId)
    {
        _activeMenuId = _activeMenuId == folderId ? null : folderId;
    }

    private async Task ToggleFavorite(FolderModel folder)
    {
        folder.IsFavorite = !folder.IsFavorite;
        await Db.ToggleFavoriteAsync(folder.Id, folder.IsFavorite);
        await LoadAllFolders(); // Reload all data
    }

    private async Task DeleteFolder(int folderId)
    {
        try
        {
            await Db.DeleteFolderAsync(folderId);
            _activeMenuId = null;
            await LoadFoldersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting folder: {ex.Message}");
        }
    }

    private async Task LoadFolders()
    {
        await LoadFoldersAsync();
    }

    private async Task DeleteSubfolder(int subfolderId)
    {
        try
        {
            await Db.DeleteSubfolderAsync(subfolderId);
            await LoadFoldersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting subfolder: {ex.Message}");
        }
    }

    private void ShowSubfolderDialog(int parentFolderId)
    {
        _currentParentFolderId = parentFolderId;
        _showSubfolderDialog = true;
        _newSubfolderName = string.Empty;
        _activeMenuId = null;
    }

    private void CloseSubfolderDialog()
    {
        _showSubfolderDialog = false;
        _newSubfolderName = string.Empty;
        _currentParentFolderId = null;
    }

    private async Task SaveSubfolderAsync()
    {
        if (!string.IsNullOrWhiteSpace(_newSubfolderName) && _currentParentFolderId.HasValue)
        {
            try
            {
                await Db.AddSubfolderAsync(_currentParentFolderId.Value, _newSubfolderName.Trim());
                _newSubfolderName = string.Empty;
                _showSubfolderDialog = false;
                await LoadFoldersAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving subfolder: {ex.Message}");
            }
        }
    }

    private async Task LoadFoldersAsync()
    {
        // Get folders from DB (either all or just favorites)
        var foldersFromDb = _showFavoritesOnly
            ? await Db.GetAllFavoritesAsync() ?? []
            : await Db.GetFoldersAsync() ?? [];

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            foldersFromDb = foldersFromDb
                .Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        _folders = foldersFromDb.Select(f => new FolderWithSubfolders
        {
            Folder = f,
            Subfolders = [],
            IsExpanded = false
        }).ToList();

        // Load subfolders only for visible folders
        foreach (var folder in _folders)
        {
            folder.Subfolders = await Db.GetSubfoldersAsync(folder.Folder.Id) ?? [];
        }
    }

    private async Task SaveFolderAsync()
    {
        if (!string.IsNullOrWhiteSpace(_newFolderName))
        {
            await Db.AddFolderAsync(_newFolderName.Trim());
            _newFolderName = string.Empty;
            _showDialog = false;
            await LoadAllFolders();
        }
    }
   
    private async Task FilterFolders()
    {
        var filtered = _allFolders.AsEnumerable();
   
        // Apply favorites filter
        if (_showFavoritesOnly)
        {
            filtered = filtered.Where(f => f.IsFavorite);
        }
   
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(f =>
                f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        _folders = [];
        foreach (var folder in filtered)
        {
            var subfolders = await Db.GetSubfoldersAsync(folder.Id) ?? [];
            _folders.Add(new FolderWithSubfolders
            {
                Folder = folder,
                Subfolders = subfolders,
                IsExpanded = false
            });
        }
        StateHasChanged();
    }

    private async Task DisplayAllFavorites()
    {
        _showFavoritesOnly = !_showFavoritesOnly;
        await LoadFoldersAsync();
    }

    private async Task ToggleExpand(FolderWithSubfolders clickedFolder)
    {
        foreach (var folder in _folders)
        {
            if (folder.Folder.Id == clickedFolder.Folder.Id)
            {
                folder.IsExpanded = !folder.IsExpanded;
                if (folder.IsExpanded && !folder.Subfolders.Any())
                {
                    folder.Subfolders = await Db.GetSubfoldersAsync(folder.Folder.Id) ?? [];
                }
            }
            else
            {
                folder.IsExpanded = false;
            }
        }

        StateHasChanged();
    }

    private async Task ToggleFavoritesFilter()
    {
        _showFavoritesOnly = !_showFavoritesOnly;
        await LoadFoldersAsync();
        await FilterFolders();
        StateHasChanged();
    }

    private async Task HandleSearchInput()
    {
        await LoadFoldersAsync();
        StateHasChanged();
    }
   
    private void CloseMenu()
    {
        _activeMenuId = null;
    }

    private void ShowDialog()
    {
        _showDialog = true;
        _newFolderName = string.Empty;
        StateHasChanged();
    }

    private void HandleSubfolderKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") _ = SaveSubfolderAsync();
    }

    private void NavigateToSubfolder(SubfolderModel subfolder)
    {
        Navigation.NavigateTo($"/subfolder/{subfolder.Id}");
    }

    private void CloseDialog()
    {
        _showDialog = false;
        _newFolderName = string.Empty;
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") _ = SaveFolderAsync();
    }


}