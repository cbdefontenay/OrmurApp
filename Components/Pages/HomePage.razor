@page "/"
@inject SqliteConnector Db
@inject NavigationManager Navigation
@inject IStringLocalizer<Languages> Loc

<div class="app-container">
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>
                @Loc["HomeSideNavNotice"]
            </h2>
        </div>
        <nav class="sidebar-nav">
            <button class="sidebar-item @(!_showFavoritesOnly ? "active" : "")" @onclick="DisplayAllFavorites">
                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                            Value="@(new Icons.Regular.Size20.Notebook())"/>
                <span>@Loc["HomeSideNavAllFolders"]</span>
            </button>
            <button class="sidebar-item @(_showFavoritesOnly ? "active" : "")" @onclick="DisplayAllFavorites">
                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                            Value="@(new Icons.Regular.Size20.StarEmphasis())"/>
                <span>@Loc["HomeSideNavFavourites"]</span>
            </button>
        </nav>
    </div>

    <div class="main-content">
        <div class="content-header">
            <h3>@(_showFavoritesOnly ? "Favoriten" : "Alle Ordner")</h3>
            <div class="search-box">
                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                            Value="@(new Icons.Regular.Size20.Search())"/>
                <input type="text"
                       placeholder="Ordner suchen..."
                       @bind="_searchTerm"
                       @oninput="OnSearchInput"/>
            </div>

            <div class="mobile-filter">
                <div class="filter-hint">@Loc["HomeFilterFolder"]</div>
                <div class="filter-options">
                    <button class="filter-button @(_showFavoritesOnly ? "active" : "")"
                            @onclick="ToggleFavoritesFilter">
                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                    Value="@(new Icons.Regular.Size16.StarEmphasis())"/>
                        <span>@Loc["HomeSideNavFavourites"]</span>
                    </button>
                </div>
            </div>
        </div>

        @if (_folders.Any())
        {
            <div class="notes-grid">
                @foreach (var folder in _folders)
                {
                    <div class="note-card" @onclick="() => ToggleExpand(folder)">
                        <div class="note-card-header">
                            <button>
                                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                            Value="@(new Icons.Regular.Size12.ArrowDown())"/>
                            </button>
                            <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                        Value="@(new Icons.Regular.Size20.Folder())"/>
                            <h3 class="folder-name">@folder.Folder.Name</h3>

                            <button class="icon-button" @onclick="() => ToggleFavorite(folder.Folder)"
                                    @onclick:stopPropagation="true" title="Toggle Favorite">
                                @if (folder.Folder.IsFavorite)
                                {
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Filled.Size24.StarEmphasis())"/>
                                }
                                else
                                {
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="new Icons.Regular.Size20.Star()"/>
                                }
                            </button>

                            <div class="note-actions">
                                <button class="icon-button" @onclick="() => ToggleMenu(folder.Folder.Id)"
                                        @onclick:stopPropagation="true">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.MoreVertical())"/>
                                </button>
                            </div>
                        </div>

                        @if (folder.IsExpanded && folder.Subfolders.Any())
                        {
                            <div class="subfolders-list">
                                @foreach (var subfolder in folder.Subfolders)
                                {
                                    <div class="subfolder-item" @onclick="() => NavigateToSubfolder(subfolder)">
                                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                    Value="@(new Icons.Regular.Size20.Folder())"/>
                                        <span>@subfolder.Name</span>
                                        <button class="icon-button small" @onclick="() => DeleteSubfolder(subfolder.Id)"
                                                @onclick:stopPropagation="true" disabled="@_isDeleting">
                                            @if (_isDeleting)
                                            {
                                                <div class="spinner"></div>
                                            }
                                            else
                                            {
                                                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                            Value="@(new Icons.Regular.Size20.Delete())"/>
                                            }
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <NoFolderComponent CreateFolder="ShowDialog"/>
            </div>
        }
    </div>

    <button class="fab" @onclick="ShowDialog">
        <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Regular.Size24.Add())"/>
    </button>

    @if (_showDialog)
    {
        <div class="modal-backdrop" @onclick="CloseDialog">
            <div class="modal" @onclick:stopPropagation>
                <div class="modal-header">
                    <h3>@Loc["HomeNewFolderHeader"]</h3>
                    <button class="icon-button" @onclick="CloseDialog">
                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                    Value="@(new Icons.Regular.Size20.Dismiss())"/>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-field">
                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                    Value="@(new Icons.Regular.Size20.Folder())"/>
                        <input @bind="_newFolderName" placeholder="Name des Ordners" @onkeyup="HandleKeyUp"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="text-button" @onclick="CloseDialog">@Loc["HomeDismiss"]</button>
                    <button class="text-button primary" @onclick="SaveFolderAsync"
                            disabled="@string.IsNullOrWhiteSpace(_newFolderName)">@Loc["HomeCreate"]
                    </button>
                </div>
            </div>
        </div>
    }

    @if (_showSubfolderDialog)
    {
        <div class="modal-backdrop" @onclick="CloseSubfolderDialog">
            <div class="modal" @onclick:stopPropagation>
                <div class="modal-header">
                    <h3>
                        @Loc["HomeNewSubfolder"]
                    </h3>
                    <button class="icon-button" @onclick="CloseSubfolderDialog">
                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                    Value="@(new Icons.Regular.Size20.Dismiss())"/>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-field">
                        <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                    Value="@(new Icons.Regular.Size20.Folder())"/>
                        <input @bind="_newSubfolderName" placeholder="Name des Unterordners..."
                               @onkeyup="HandleSubfolderKeyUp"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="text-button" @onclick="CloseSubfolderDialog">
                        @Loc["HomeDismiss"]
                    </button>
                    <button class="text-button primary" @onclick="SaveSubfolderAsync">
                        @Loc["HomeCreate"]
                    </button>
                </div>
            </div>
        </div>
    }

    @if (_activeMenuId != null)
    {
        var folderWithSubfoldersForMenu = _folders.FirstOrDefault(fws => fws.Folder.Id == _activeMenuId);
        if (folderWithSubfoldersForMenu != null)
        {
            var folderObject = folderWithSubfoldersForMenu.Folder;
            <div class="modal-backdrop" @onclick="CloseMenu">
                <div class="modal actions-menu-popup-modal" @onclick:stopPropagation>
                    <div class="modal-header">
                        <h3>
                            @Loc["HomeSubfolderWhatTodo", folderObject.Name!]
                        </h3>
                        <button class="icon-button" @onclick="CloseMenu">
                            <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                        Value="@(new Icons.Regular.Size20.Dismiss())"/>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="actions-menu-items-container">
                            <button class="modal-menu-item" @onclick="() => ShowSubfolderDialog(folderObject.Id)">
                                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                            Value="@(new Icons.Regular.Size20.Add())"/>
                                <span>
                                    @Loc["HomeAddNewSubfolder"]
                                </span>
                            </button>
                            <button class="modal-menu-item danger"
                                    @onclick="() => ShowDeleteConfirmation(folderObject.Id, folderObject.Name!)">
                                <FluentIcon Color="Color.Custom" CustomColor="var(--error)"
                                            Value="@(new Icons.Regular.Size20.Delete())"/>
                                <span>
                                    @Loc["HomeDeleteFolder"]
                                </span>
                            </button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="text-button" @onclick="CloseMenu">
                            Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@if (_showDialog)
{
    <div class="modal-backdrop" @onclick="CloseDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@Loc["HomeNewFolderHeader"]</h3>
                <button class="icon-button" @onclick="CloseDialog">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                Value="@(new Icons.Regular.Size20.Folder())"/>
                    <input @bind="_newFolderName" placeholder=@Loc["HomePlaceholder"] @onkeyup="HandleKeyUp"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseDialog">@Loc["HomeDismiss"]</button>
                <button class="text-button primary" @onclick="SaveFolderAsync">
                    @Loc["HomeCreate"]
                </button>
            </div>
        </div>
    </div>
}

@if (_showSubfolderDialog)
{
    <div class="modal-backdrop" @onclick="CloseSubfolderDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Neuer Unterordner</h3>
                <button class="icon-button" @onclick="CloseSubfolderDialog">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                Value="@(new Icons.Regular.Size20.Folder())"/>
                    <input @bind="_newSubfolderName" placeholder="Name des Unterordners..."
                           @onkeyup="HandleSubfolderKeyUp"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseSubfolderDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="SaveSubfolderAsync">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@if (_showSubfolderDialog)
{
    <div class="dialog-backdrop" @onclick="CloseSubfolderDialog">
        <div class="dialog-container" @onclick:stopPropagation>
            <div class="dialog-header">
                <h2>Unterordner kreieren</h2>
            </div>
            <div class="dialog-body">
                <div class="input-container">
                    <input class="input"
                           @bind="_newSubfolderName"
                           placeholder="Name des Unterordners..."
                           @onkeyup="HandleSubfolderKeyUp"/>
                    <div class="underline"></div>
                </div>
            </div>
            <div class="dialog-footer">
                <button class="btn text-btn" @onclick="CloseSubfolderDialog">Abbrechen</button>
                <button class="btn text-btn primary" @onclick="SaveSubfolderAsync"
                        disabled="@string.IsNullOrWhiteSpace(_newSubfolderName)">Kreieren
                </button>
            </div>
        </div>
    </div>
}

@if (_showDeleteConfirmation)
{
    <div class="modal-backdrop" @onclick="CancelDelete">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@Loc["HomeDeleteFolder"]</h3>
                <button class="icon-button" @onclick="CancelDelete">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--error)"
                                Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <p>Möchten Sie den Ordner "@_folderToDeleteName" wirklich löschen?</p>
                <p class="warning-text">
                    <FluentIcon Color="Color.Custom" CustomColor="var(--error)"
                                Value="@(new Icons.Filled.Size20.Warning())"/>
                    Dies wird auch alle Unterordner und Notizen in diesem Ordner löschen.
                </p>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CancelDelete">@Loc["HomeDismiss"]</button>
                <button class="text-button danger" @onclick="ConfirmDelete">
                    @Loc["HomeDelete"]
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<FolderWithSubfolders> _folders = [];
    private string _newFolderName = string.Empty;
    private string _newSubfolderName = string.Empty;
    private bool _showDialog = false;
    private bool _showSubfolderDialog = false;
    private int? _activeMenuId = null;
    private bool _showFavoritesOnly = false;
    private int? _currentParentFolderId = null;
    private string _searchTerm = string.Empty;
    private List<FolderModel> _allFolders = [];
    private bool _showDeleteConfirmation = false;
    private int? _folderToDeleteId = null;
    private string _folderToDeleteName = string.Empty;
    private bool _isDeleting = false;

    private Task ShowDeleteConfirmation(int folderId, string folderName)
    {
        _folderToDeleteId = folderId;
        _folderToDeleteName = folderName;
        _showDeleteConfirmation = true;
        _activeMenuId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
        _folderToDeleteId = null;
        _folderToDeleteName = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        if (_folderToDeleteId.HasValue)
        {
            await DeleteFolder(_folderToDeleteId.Value);
            _showDeleteConfirmation = false;
            _folderToDeleteId = null;
            _folderToDeleteName = string.Empty;
        }
    }

    private async Task DeleteFolder(int folderId)
    {
        try
        {
// Show loading indicator
            await InvokeAsync(StateHasChanged);

            await Db.DeleteFolderAsync(folderId);
            await LoadAllFolders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting folder: {ex.Message}");
// Show error to user
        }
        finally
        {
// Hide loading indicator
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllFolders();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterFolders();
    }

    private async Task LoadAllFolders()
    {
        _allFolders = await Db.GetFoldersAsync() ?? [];
        await FilterFolders();
    }

    private void ToggleMenu(int folderId)
    {
        _activeMenuId = _activeMenuId == folderId ? null : folderId;
    }

    private async Task ToggleFavorite(FolderModel folder)
    {
        folder.IsFavorite = !folder.IsFavorite;
        await Db.ToggleFavoriteAsync(folder.Id, folder.IsFavorite);
        await LoadAllFolders();
    }

    private async Task DeleteSubfolder(int subfolderId)
    {
        if (_isDeleting) return;

        _isDeleting = true;
        StateHasChanged();

        try
        {
            await Db.DeleteSubfolderAsync(subfolderId);
            await InvokeAsync(async () =>
            {
                await LoadFoldersAsync();
                StateHasChanged();
            });
        }
        catch (TimeoutException ex)
        {
            await InvokeAsync(() =>
            {
                Console.WriteLine($"Timeout: {ex.Message}");
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                Console.WriteLine($"Error: {ex.Message}");
                StateHasChanged();
            });
        }
        finally
        {
            _isDeleting = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShowSubfolderDialog(int parentFolderId)
    {
        _currentParentFolderId = parentFolderId;
        _showSubfolderDialog = true;
        _newSubfolderName = string.Empty;
        _activeMenuId = null;
    }

    private void CloseSubfolderDialog()
    {
        _showSubfolderDialog = false;
        _newSubfolderName = string.Empty;
        _currentParentFolderId = null;
    }

    private async Task SaveSubfolderAsync()
    {
        if (!string.IsNullOrWhiteSpace(_newSubfolderName) && _currentParentFolderId.HasValue)
        {
            try
            {
                await Db.AddSubfolderAsync(_currentParentFolderId.Value, _newSubfolderName.Trim());
                _newSubfolderName = string.Empty;
                _showSubfolderDialog = false;
                await LoadFoldersAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving subfolder: {ex.Message}");
            }
        }
    }

    private async Task LoadFoldersAsync()
    {
        var foldersFromDb = _showFavoritesOnly
            ? await Db.GetAllFavoritesAsync() ?? new List<FolderModel>()
            : await Db.GetFoldersAsync() ?? [];

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            foldersFromDb = foldersFromDb
                .Where(f => f.Name != null && f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        _folders = foldersFromDb.Select(f => new FolderWithSubfolders
            {
                Folder = f,
                Subfolders = [],
                IsExpanded = false
            }
        ).ToList();
    }

    private async Task SaveFolderAsync()
    {
        if (!string.IsNullOrWhiteSpace(_newFolderName))
        {
            await Db.AddFolderAsync(_newFolderName.Trim());
            _newFolderName = string.Empty;
            _showDialog = false;
            await LoadAllFolders();
        }
    }

    private async Task FilterFolders()
    {
        var filtered = _allFolders.AsEnumerable();

        if (_showFavoritesOnly)
        {
            filtered = filtered.Where(f => f.IsFavorite);
        }

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(f =>
                f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        _folders = [];
        foreach (var folder in filtered)
        {
            var subfolders = await Db.GetSubfoldersAsync(folder.Id) ?? [];
            _folders.Add(new FolderWithSubfolders
            {
                Folder = folder,
                Subfolders = subfolders,
                IsExpanded = false
            });
        }

        StateHasChanged();
    }

    private async Task DisplayAllFavorites()
    {
        _showFavoritesOnly = !_showFavoritesOnly;
        await LoadFoldersAsync();
    }

    private async Task ToggleExpand(FolderWithSubfolders clickedFolder)
    {
        clickedFolder.IsExpanded = !clickedFolder.IsExpanded;

        if (clickedFolder.IsExpanded && !clickedFolder.Subfolders.Any())
        {
            clickedFolder.Subfolders = await Db.GetSubfoldersAsync(clickedFolder.Folder.Id) ?? [];
        }

        StateHasChanged();
    }

    private async Task ToggleFavoritesFilter()
    {
        _showFavoritesOnly = !_showFavoritesOnly;
        await LoadFoldersAsync();
        await FilterFolders();
        StateHasChanged();
    }

    private void CloseMenu()
    {
        _activeMenuId = null;
    }

    private void ShowDialog()
    {
        _showDialog = true;
        _newFolderName = string.Empty;
        StateHasChanged();
    }

    private void HandleSubfolderKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") _ = SaveSubfolderAsync();
    }

    private void NavigateToSubfolder(SubfolderModel subfolder)
    {
        Navigation.NavigateTo($"/subfolder/{subfolder.Id}");
    }

    private void CloseDialog()
    {
        _showDialog = false;
        _newFolderName = string.Empty;
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") _ = SaveFolderAsync();
    }

}