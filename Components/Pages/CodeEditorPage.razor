@page "/code-editor/{SubfolderId:int}"
@page "/code-editor/{SubfolderId:int}/{NoteId:int}"
@inject SqliteConnector Db
@layout GoBackLayout
@inject NavigationManager Navigation
@inject IJSRuntime Js
@using CommunityToolkit.Maui.Alerts
@using Markdig
@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Markdig.SyntaxHighlighting
@using ColorCode
@using Ormur.Data.Models

@if (_subfolder != null)
{
    <div class="editor-container">
        <div class="editor-header">
            <input class="title-input" @bind="_noteTitle" placeholder="Code Snippet Title"/>
            <div class="header-actions">
                <button class="save-button" @onclick="SaveNote" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.SpinnerIos())" Color="Color.Lightweight"/>
                        <span>Speichern...</span>
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="Color.Lightweight"/>
                        <span>Speichern</span>
                    }
                </button>
            </div>
        </div>

        <div class="tabs">
            <button class="@(_activeTab == 0 ? "active" : "")" @onclick="() => SetActiveTab(0)">
                Editor
            </button>
            <button class="@(_activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)">
                Vorschau
            </button>
            <button class="@(_activeTab == 2 ? "active" : "")" @onclick="() => SetActiveTab(2)">
                Snippets
            </button>
        </div>

        <div class="tab-content">
            @switch (_activeTab)
            {
                case 0:
                    <div class="editor-area">
                        <div class="toolbar">
                            <span class="hint">Markdown mit Code-Support (```language für Syntax-Highlighting)</span>
                        </div>
                        <textarea @bind="_markdownText"
                                  @bind:event="oninput"
                                  placeholder="Schreibe deinen Code oder Dokumentation..."
                                  class="editor-input code-input"
                                  id="editor-input">
                        </textarea>
                    </div>
                    break;
                case 1:
                {
                    <div class="preview-area">
                        @if (string.IsNullOrEmpty(_markdownText))
                        {
                            <div class="empty-state">
                                <FluentIcon Value="@(new Icons.Regular.Size24.Code())" Color="Color.Lightweight"/>
                                <p>Schreibe Code oder Dokumentation im Editor, um die Vorschau zu sehen</p>
                            </div>
                        }
                        else
                        {
                            <div class="rendered-content">
                                @((MarkupString)Markdown.ToHtml(_markdownText, _pipeline))
                            </div>
                        }
                    </div>
                    break;
                }
                case 2:
                {
                    <div class="snippet-management">
                        <div class="snippet-header">
                            <h3>Code Snippets</h3>
                            <div class="language-selector">
                                <select @bind="_selectedLanguage">
                                    @foreach (var lang in _supportedLanguages)
                                    {
                                        <option value="@lang">@lang</option>
                                    }
                                </select>
                                <button class="add-snippet-button" @onclick="ShowAddSnippetDialog">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Color="Color.Lightweight"/>
                                    <span>Snippet hinzufügen</span>
                                </button>
                            </div>
                        </div>

                        @if (_snippets.Any())
                        {
                            <div class="snippet-list">
                                @foreach (var snippet in _snippets.OrderBy(s => s.Language))
                                {
                                    <div class="snippet-item">
                                        <div class="snippet-language">@snippet.Language</div>
                                        <div class="snippet-content">@snippet.Content</div>
                                        <button class="insert-snippet" @onclick="() => InsertSnippet(snippet)">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.ArrowAutofitUp())"/>
                                        </button>
                                        <button class="delete-snippet" @onclick="() => DeleteSnippet(snippet)">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())"/>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <FluentIcon Value="@(new Icons.Regular.Size24.CodeCircle())"/>
                                <p>Noch keine Code-Snippets</p>
                            </div>
                        }
                    </div>
                    break;
                }
            }
        </div>
    </div>
}
else
{
    <div class="loading">
        <FluentProgressRing Color="Color.Success"/>
        <p>Daten werden geladen...</p>
    </div>
}

@if (_showAddSnippetDialog)
{
    <div class="modal-backdrop" @onclick="CloseAddSnippetDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Code-Snippet hinzufügen</h3>
                <button class="icon-button" @onclick="CloseAddSnippetDialog">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <select @bind="_selectedLanguage" class="language-select">
                        @foreach (var lang in _supportedLanguages)
                        {
                            <option value="@lang">@lang</option>
                        }
                    </select>
                </div>
                <div class="input-field">
                    <textarea @bind="_newSnippetContent"
                           placeholder="Code einfügen..."
                           @ref="_snippetInputRef"
                           class="snippet-textarea"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseAddSnippetDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="AddSnippet"
                        disabled="@string.IsNullOrWhiteSpace(_newSnippetContent)">
                    Hinzufügen
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SubfolderId { get; set; }
    [Parameter] public int NoteId { get; set; }

    private SubfolderModel? _subfolder;
    private string _markdownText = string.Empty;
    private string _noteTitle = string.Empty;
    private MarkdownPipeline? _pipeline;
    private int _activeTab = 0;
    private bool _showAddSnippetDialog = false;
    private string _newSnippetContent = string.Empty;
    private string _selectedLanguage = "csharp";
    private bool _isNewNote = true;
    private ElementReference _snippetInputRef;
    private List<CodeSnippetModel> _snippets = [];
    private bool _isSaving = false;
    
    private readonly List<string> _supportedLanguages =
    [
        "csharp", "javascript", "typescript", "python", "java",
        "html", "css", "sql", "xml", "json", "bash", "powershell",
        "php", "ruby", "go", "rust", "kotlin", "swift"
    ];

    protected override async Task OnInitializedAsync()
    {
        _pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseSyntaxHighlighting()
            .Build();

        await LoadSubfolderAsync();

        if (NoteId > 0)
        {
            await LoadNoteAsync();
            _isNewNote = false;
        }
        
        _snippets = await Db.GetCodeSnippetsByNoteAsync(NoteId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showAddSnippetDialog)
        {
            await _snippetInputRef.FocusAsync();
        }
    }

    private async Task LoadSubfolderAsync()
    {
        try
        {
            _subfolder = await Db.GetSubfolderAsync(SubfolderId);
            if (_subfolder == null)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subfolder: {ex.Message}");
        }
    }

    private async Task LoadNoteAsync()
    {
        try
        {
            var note = await Db.GetNoteAsync(NoteId);
            if (note != null)
            {
                _noteTitle = note.Title;
                _markdownText = note.Content;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading note: {ex.Message}");
        }
    }

    private void SetActiveTab(int tabIndex)
    {
        _activeTab = tabIndex;
    }

    private void ShowAddSnippetDialog()
    {
        _showAddSnippetDialog = true;
        _newSnippetContent = string.Empty;
    }

    private void CloseAddSnippetDialog()
    {
        _showAddSnippetDialog = false;
    }

    private async Task AddSnippet()
    {
        if (string.IsNullOrWhiteSpace(_newSnippetContent)) return;

        var newSnippet = new CodeSnippetModel
        {
            NoteId = NoteId,
            Language = _selectedLanguage,
            Content = _newSnippetContent
        };

        try
        {
            await Db.AddCodeSnippetAsync(NoteId, _selectedLanguage, _newSnippetContent);
            _snippets.Add(newSnippet);
            _showAddSnippetDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding snippet: {ex.Message}");
        }
    }

    private async Task DeleteSnippet(CodeSnippetModel snippet)
    {
        try
        {
            await Db.DeleteCodeSnippetAsync(snippet.Id);
            _snippets.Remove(snippet);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting snippet: {ex.Message}");
        }
    }

    private void InsertSnippet(CodeSnippetModel snippet)
    {
        var markdownSnippet = $"```{snippet.Language}\n{snippet.Content}\n```\n";
        _markdownText += markdownSnippet;
        _activeTab = 0; // Switch to editor tab
    }

    private async Task SaveNote()
    {
        if (_subfolder == null || string.IsNullOrWhiteSpace(_noteTitle)) return;
        _isSaving = true;
        StateHasChanged();
        try
        {
            if (_isNewNote)
            {
                NoteId = await Db.AddNoteAsync(_subfolder.Id, _noteTitle, _markdownText);
                _isNewNote = false;
            }
            else
            {
                await Db.UpdateNoteAsync(NoteId, _noteTitle, _markdownText);
            }

            await Task.Delay(300);
            await Toast.Make("Code erfolgreich gespeichert", ToastDuration.Short, 20).Show();

            Navigation.NavigateTo($"/code-editor/{SubfolderId}/{NoteId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving note: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}