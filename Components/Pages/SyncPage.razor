@page "/sync"
@inject SyncService SyncService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="sync-container">
    <h3>
        @Loc["SyncHeader"]
    </h3>

    <div class="sync-instructions">
        <p><strong>@Loc["SyncSubHeader"]</strong></p>
        <ol>
            <li>Stellen Sie sicher, dass beide Geräte im gleichen WLAN-Netzwerk sind (Hotspot aktivieren).</li>
            <li>Starten Sie die Synchronisation auf einem Gerät.</li>
            <li>Geben Sie die IP-Adresse des anderen Geräts ein.</li>
            <li>Klicken Sie auf "Synchronisation starten".</li>
        </ol>
    </div>

    <div class="ip-display">
        <label>Ihre Geräte-IP:</label>
        <div class="ip-address">
            @if (_ipLoading)
            {
                <span class="loading-text">IP wird ermittelt...</span>
            }
            else if (string.IsNullOrEmpty(_localIp))
            {
                <span class="error-text">Nicht verfügbar (Netzwerk prüfen)</span>
            }
            else
            {
                @_localIp
            }
        </div>
    </div>

    <div class="sync-controls">
        <input type="text"
               @bind="_remoteIp"
               placeholder="IP des anderen Geräts eingeben"
               class="ip-input"
               inputmode="decimal"/>

        <button @onclick="StartSync"
                disabled="@_isSyncing"
                class="sync-button @(_isSyncing ? "syncing" : "")">
            @if (_isSyncing)
            {
                <span class="spinner"></span>
                <span>Wird synchronisiert...</span>
            }
            else
            {
                <span>Synchronisation starten</span>
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(_status))
    {
        <div class="status @(_isError ? "error" : "success")">
            @_status
        </div>
    }
</div>

@code {
    private string? _status;
    private string? _localIp;
    private string? _remoteIp;
    private bool _isSyncing;
    private bool _isError;
    private bool _ipLoading = true;

    protected override async Task OnInitializedAsync()
    {
        SyncService.StopWiFiSyncServer();
        await LoadIpAddress();
        SyncService.StartWiFiSyncServer();
    }

    private async Task LoadIpAddress()
    {
        _ipLoading = true;
        StateHasChanged();

        for (var i = 0; i < 3; i++)
        {
            _localIp = SyncService.GetLocalIpAddress();
            if (!string.IsNullOrEmpty(_localIp)) break;
            await Task.Delay(500);
        }

        _ipLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        SyncService.StopWiFiSyncServer();
    }

    private async Task StartSync()
    {
        if (string.IsNullOrWhiteSpace(_remoteIp))
        {
            ShowStatus("Bitte geben Sie die IP des anderen Geräts ein", true);
            return;
        }

        _isSyncing = true;
        ShowStatus("Verbindung zum Gerät wird hergestellt...", false);

        try
        {
            await SyncService.SyncViaWiFiAsync(_remoteIp);
            ShowStatus("Synchronisation erfolgreich!", false);
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ShowStatus($"Synchronisation fehlgeschlagen: {ex.Message}", true);
        }
        finally
        {
            _isSyncing = false;
        }
    }

    private void ShowStatus(string message, bool isError)
    {
        _status = message;
        _isError = isError;
        StateHasChanged();
    }

}