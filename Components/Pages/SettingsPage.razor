@page "/settings"
@inject ThemeService ThemeService
@inject IJSRuntime JsRuntime

<div class="settings-container">
    <div class="title-wrapper">
        <h3 class="settings-title">
            @Loc["SettingsHeader"]
        </h3>
    </div>

    <div class="settings-section">
        <div class="section-header" @onclick="ToggleThemeMenu">
            <h4 class="section-title">Farbthema</h4>
            <div class="current-theme-display">
                <span>@GetCurrentThemeName()</span>
                <span class="dropdown-icon">
                    @(_showThemeMenu ? "▲" : "▼")
                </span>
            </div>
        </div>

        @if (_showThemeMenu)
        {
            <div class="theme-menu">
                <div class="theme-option @GetActiveClass("default")" @onclick="SetDefaultTheme">
                    <div class="theme-color-preview default-theme"></div>
                    <span class="theme-label">
                        @Loc["SettingsStandardColor"]
                    </span>
                    @if (ThemeService.CurrentTheme == "default")
                    {
                        <span class="check-icon">✓</span>
                    }
                </div>

                <div class="theme-option @GetActiveClass("purple")" @onclick="SetPurpleTheme">
                    <div class="theme-color-preview purple-theme"></div>
                    <span class="theme-label">
                        @Loc["SettingsPurpleColor"]
                    </span>
                    @if (ThemeService.CurrentTheme == "purple")
                    {
                        <span class="check-icon">✓</span>
                    }
                </div>

                <div class="theme-option @GetActiveClass("green")" @onclick="SetGreenTheme">
                    <div class="theme-color-preview green-theme"></div>
                    <span class="theme-label">
                        @Loc["SettingsGreenColor"]
                    </span>
                    @if (ThemeService.CurrentTheme == "green")
                    {
                        <span class="check-icon">✓</span>
                    }
                </div>

                <div class="theme-option @GetActiveClass("dark")" @onclick="SetDarkTheme">
                    <div class="theme-color-preview dark-theme"></div>
                    <span class="theme-label">
                        @Loc["SettingsDarkBlueColor"]
                        </span>
                    @if (ThemeService.CurrentTheme == "dark")
                    {
                        <span class="check-icon">✓</span>
                    }
                </div>
            </div>
        }
    </div>

    <div class="settings-section coming-soon">
        <div class="section-header">
            <h4 class="section-title">
                @Loc["SettingsCultureHeader"]
            </h4>
            <select class="form-control" @bind="Culture" style="width:300px; margin-left:10px;">
                @foreach (var culture in _cultures)
                {
                    <option value="@culture">@culture.DisplayName</option>
                }
            </select>
        </div>
    </div>

    <div class="settings-section coming-soon">
        <div class="section-header">
            <h4 class="section-title">Datenschutz</h4>
            <span class="coming-soon-text">Bald verfügbar</span>
        </div>
    </div>
</div>

@code {
    private bool _showThemeMenu = false;

    protected override async Task OnInitializedAsync()
    {
        await ThemeService.InitializeAsync();
        ThemeService.OnThemeChanged += StateHasChanged;
    }

    private string GetCurrentThemeName()
    {
        return ThemeService.CurrentTheme switch
        {
            "default" => "Standard (Hell Blau)",
            "purple" => "Lila",
            "green" => "Grün",
            "dark" => "Dunkel Blau",
            _ => "Standard"
        };
    }

    private string GetActiveClass(string theme) =>
        ThemeService.CurrentTheme == theme ? "active" : "";

    private void ToggleThemeMenu()
    {
        _showThemeMenu = !_showThemeMenu;
    }

    private async Task SetDefaultTheme() => await SetTheme("default");
    private async Task SetPurpleTheme() => await SetTheme("purple");
    private async Task SetGreenTheme() => await SetTheme("green");
    private async Task SetDarkTheme() => await SetTheme("dark");

    private async Task SetTheme(string theme)
    {
        _showThemeMenu = false;
        await ThemeService.SetThemeAsync(theme);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= StateHasChanged;
    }

    readonly CultureInfo[] _cultures =
    [
        new("de-DE"),
        new("fr-FR")
    ];

    CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                Thread.CurrentThread.CurrentCulture = value;
                Thread.CurrentThread.CurrentUICulture = value;
                CultureInfo.DefaultThreadCurrentCulture = value;
                CultureInfo.DefaultThreadCurrentUICulture = value;
                Preferences.Set("language", value.Name);
            }
        }
    }

}