@page "/subfolder/{SubfolderId:int}"
@inject SqliteConnector Db
@inject NavigationManager Navigation
@using Microsoft.FluentUI.AspNetCore.Components
@using Ormur.Data.Models
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@layout GoBackLayout

<div class="subfolder-container">
    <div class="subfolder-header">
        <div class="header-content">
            <div class="header-title-wrapper">
                <h2 class="subfolder-title">@_subfolder?.Name</h2>
                <p class="subfolder-meta">Erstellt am @_subfolder?.DateCreated.ToString("f")</p>
            </div>
        </div>
    </div>

    <div class="notes-actions">
        <button class="create-note-button" @onclick="CreateNewNote">
            <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Regular.Size20.Add())"/>
           <span>Neue Notiz</span>
        </button>
        <button class="create-note-button" @onclick="CreateNewCodeNote">
            <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Regular.Size20.Code())"/>
           <span>Neue Code Notiz</span>
        </button>
    </div>

    <div class="notes-list">
        @if (_notes.Any())
        {
            @foreach (var note in _notes)
            {
                <div class="note-accordion">
                    <div class="accordion-header" @onclick="() => ToggleNote(note)">
                        <div class="header-content">
                            @switch (note.IsExpanded)
                            {
                                case true:
                                    <FluentIcon Color="Color.Neutral"
                                                Value="@(new Icons.Regular.Size20.ChevronDown())"/>
                                    break;
                                default:
                                    <FluentIcon Color="Color.Neutral"
                                                Value="@(new Icons.Regular.Size20.ChevronRight())"/>
                                    break;
                            }
                            <h3>@note.Note.Title</h3>
                            <span class="note-date">@note.Note.DateModified.ToString("g")</span>
                        </div>
                        <div class="accordion-actions">
                            <button class="icon-button" @onclick="async (e) => await DeleteNote(note.Note.Id)"
                                    @onclick:stopPropagation="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Delete())"/>
                            </button>
                        </div>
                    </div>

                    @if (note.IsExpanded)
                    {
                        <div class="accordion-content">
                            <div class="note-content">
                                @if (note.IsExpanded && !string.IsNullOrEmpty(note.Note.Content))
                                {
                                    <div class="note-content-rendered">
                                        @((MarkupString)Markdown.ToHtml(note.Note.Content, _markdownPipeline))
                                    </div>
                                }

                                @if (note.TodoItems.Any())
                                {
                                    <div class="todo-list">
                                        @foreach (var todo in note.TodoItems.OrderBy(t => t.Position))
                                        {
                                            <div class="todo-item">
                                                <input type="checkbox"
                                                       checked="@todo.IsCompleted"
                                                       @onchange="(e) => ToggleTodo(todo, e.Value)"/>
                                                <span
                                                    class="@(todo.IsCompleted ? "completed" : "")">@todo.Content</span>
                                                <button class="delete-todo" @onclick="() => DeleteTodo(todo)"
                                                        @onclick:stopPropagation="true">
                                                    <FluentIcon Value="@(new Icons.Regular.Size12.Dismiss())"/>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="note-actions">
                                <button class="edit-button" @onclick="() => EditNote(note.Note.Id)">
                                    <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Regular.Size20.Edit())"/>
                                    <span>Bearbeiten</span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <FluentIcon Value="@(new Icons.Regular.Size48.Note())"/>
                <h3>Noch keine Notizen</h3>
                <p>Erstelle eine neue Notiz, um loszulegen</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int SubfolderId { get; set; }
    private SubfolderModel? _subfolder;
    private List<NoteWithTodoModel> _notes = [];
    private MarkdownPipeline? _markdownPipeline;

    protected override async Task OnParametersSetAsync()
    {
        await LoadSubfolderAsync();
        await LoadNotesAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _markdownPipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
    }

    private async Task LoadSubfolderAsync()
    {
        try
        {
            _subfolder = await Db.GetSubfolderAsync(SubfolderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subfolder: {ex.Message}");
        }
    }

    private async Task CreateNewNote()
    {
        if (_subfolder == null)
            return;

        try
        {
            const string defaultTitle = "Neue Notiz";
            var defaultContent = string.Empty;

            var newNoteId = await Db.AddNoteAsync(_subfolder.Id, defaultTitle, defaultContent);

            Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{newNoteId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating new note: {ex.Message}");
        }
    }

    private async Task CreateNewCodeNote()
    {
        if (_subfolder == null)
            return;

        try
        {
            const string defaultTitle = "Neuer Code";
            var defaultContent = string.Empty;

            var newNoteId = await Db.AddNoteAsync(_subfolder.Id, defaultTitle, defaultContent);

            Navigation.NavigateTo($"/code-editor/{SubfolderId}/{newNoteId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating new note: {ex.Message}");
        }
    }

    private async Task LoadNotesAsync()
    {
        if (_subfolder == null) return;

        var notes = await Db.GetNotesBySubfolderAsync(_subfolder.Id);
        _notes = [];

        foreach (var note in notes)
        {
            var todos = await Db.GetTodoItemsByNoteAsync(note.Id);
            _notes.Add(new NoteWithTodoModel
            {
                Note = note,
                TodoItems = todos,
                IsExpanded = false
            });
        }
    }

    private void ToggleNote(NoteWithTodoModel note)
    {
        note.IsExpanded = !note.IsExpanded;
    }


    private async Task DeleteNote(int noteId)
    {
        try
        {
            await Db.DeleteNoteAsync(noteId);
            await LoadNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting note: {ex.Message}");
        }
    }

    private async Task ToggleTodo(TodoItemModel todo, object isChecked)
    {
        try
        {
            var completed = isChecked as bool? ?? false;
            await Db.ToggleTodoItemAsync(todo.Id, completed);
            todo.IsCompleted = completed;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling todo: {ex.Message}");
        }
    }

    private async Task DeleteTodo(TodoItemModel todo)
    {
        try
        {
            await Db.DeleteTodoItemAsync(todo.Id);

            var note = _notes.FirstOrDefault(n => n.TodoItems.Any(t => t.Id == todo.Id));
            if (note != null)
            {
                note.TodoItems.Remove(todo);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting todo: {ex.Message}");
        }
    }

    private void EditNote(int noteId)
    {
        Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{noteId}");
    }

}