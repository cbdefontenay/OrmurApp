@page "/subfolder/{SubfolderId:int}"
@inject SqliteConnector Db
@inject NavigationManager Navigation
@layout GoBackLayout

<div class="subfolder-container">
    <div class="subfolder-header">
        <div class="header-content">
            <div class="header-title-wrapper">
                <h2 class="subfolder-title">@_subfolder?.Name</h2>
                <p class="subfolder-meta">Erstellt am @_subfolder?.DateCreated.ToString("f")</p>
            </div>
        </div>
    </div>

    <div class="notes-actions">
        <button class="create-note-button" @onclick="CreateNewNote">
            <FluentIcon Color="Color.Custom" CustomColor="var(--on-primary)" Value="@(new Icons.Regular.Size20.Add())"/>
            <span>Neue Notiz</span>
        </button>
    </div>

    <div class="notes-list">
        @if (_notes.Any())
        {
            @foreach (var note in _notes)
            {
                <div class="note-accordion">
                    <div class="accordion-header" @onclick="() => ToggleNote(note)">
                        <div class="header-content">
                            @switch (note.IsExpanded)
                            {
                                case true:
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.ChevronDown())"/>
                                    break;
                                default:
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.ChevronRight())"/>
                                    break;
                            }
                            <h3>@note.Note.Title</h3>
                            <span class="note-date">@note.Note.DateModified.ToString("g")</span>
                        </div>
                        <div class="accordion-actions">
                            <button class="icon-button" @onclick="async e => await DeleteNote(note.Note.Id)"
                                    @onclick:stopPropagation="true">
                                <FluentIcon Color="Color.Custom" CustomColor="var(--error)"
                                            Value="@(new Icons.Regular.Size20.Delete())"/>
                            </button>
                        </div>
                    </div>

                    @if (note.IsExpanded)
                    {
                        <div class="accordion-content">
                            <div class="note-content">
                                @if (note.IsExpanded && !string.IsNullOrEmpty(note.Note.Content))
                                {
                                    <div class="note-content-rendered">
                                        @if (note.IsExpanded && !string.IsNullOrEmpty(note.Note.Content))
                                        {
                                            @GetRenderedNoteContent(note.Note)
                                        }
                                    </div>
                                }

                                @if (note.TodoItems.Any())
                                {
                                    <div class="todo-list">
                                        @foreach (var todo in note.TodoItems.OrderBy(t => t.Position))
                                        {
                                            <div class="todo-item">
                                                <input type="checkbox"
                                                       checked="@todo.IsCompleted"
                                                       @onchange="e => ToggleTodo(todo, e.Value)"/>
                                                <span
                                                    class="@(todo.IsCompleted ? "completed" : "")">
                                                    @todo.Content
                                                </span>
                                                <button class="delete-todo" @onclick="() => DeleteTodo(todo)"
                                                        @onclick:stopPropagation="true">
                                                    <FluentIcon Color="Color.Custom" CustomColor="var(--error)"
                                                                Value="@(new Icons.Regular.Size12.Dismiss())"/>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="note-actions">
                                <button class="edit-button" @onclick="() => EditNote(note.Note.Id)">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--on-primary)"
                                                Value="@(new Icons.Regular.Size20.Edit())"/>
                                    <span>Bearbeiten</span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                            Value="@(new Icons.Regular.Size48.Note())"/>
                <h3>Noch keine Notizen</h3>
                <p>Erstelle eine neue Notiz, um loszulegen</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int SubfolderId { get; set; }
    private SubfolderModel? _subfolder;
    private List<NoteWithTodoModel> _notes = [];
    private MarkdownPipeline? _markdownPipeline;
    private MarkdownPipeline? _codePipeline;

    protected override async Task OnParametersSetAsync()
    {
        await LoadSubfolderAsync();
        await LoadNotesAsync();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        _markdownPipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        _codePipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();
    }

    private async Task LoadSubfolderAsync()
    {
        try
        {
            _subfolder = await Db.GetSubfolderAsync(SubfolderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subfolder: {ex.Message}");
        }
    }

    private async Task CreateNewNote()
    {
        if (_subfolder == null)
            return;

        try
        {
            const string defaultTitle = "Neue Notiz";
            var defaultContent = string.Empty;

            var newNoteId = await Db.AddNoteAsync(_subfolder.Id, defaultTitle, defaultContent);

            Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{newNoteId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating new note: {ex.Message}");
        }
    }

    private async Task LoadNotesAsync()
    {
        if (_subfolder == null) return;

        var notes = await Db.GetNotesBySubfolderAsync(_subfolder.Id);
        _notes = [];

        foreach (var note in notes)
        {
            var todos = await Db.GetTodoItemsByNoteAsync(note.Id);
            _notes.Add(new NoteWithTodoModel
            {
                Note = note,
                TodoItems = todos,
                IsExpanded = false
            });
        }
    }

    private void ToggleNote(NoteWithTodoModel note)
    {
        note.IsExpanded = !note.IsExpanded;
    }


    private async Task DeleteNote(int noteId)
    {
        try
        {
            await Db.DeleteNoteAsync(noteId);
            await LoadNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting note: {ex.Message}");
        }
    }

    private async Task ToggleTodo(TodoItemModel todo, object isChecked)
    {
        try
        {
            var completed = isChecked as bool? ?? false;
            await Db.ToggleTodoItemAsync(todo.Id, completed);
            todo.IsCompleted = completed;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling todo: {ex.Message}");
        }
    }

    private async Task DeleteTodo(TodoItemModel todo)
    {
        try
        {
            await Db.DeleteTodoItemAsync(todo.Id);

            var note = _notes.FirstOrDefault(n => n.TodoItems.Any(t => t.Id == todo.Id));
            if (note != null)
            {
                note.TodoItems.Remove(todo);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting todo: {ex.Message}");
        }
    }

    private void EditNote(int noteId)
    {
        Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{noteId}");
    }

    private MarkupString GetRenderedNoteContent(NoteModel note)
    {
        var html = note.Title.StartsWith("Neuer Code") || note.Content.Contains("```")
            ? Markdown.ToHtml(note.Content, _codePipeline)
            : Markdown.ToHtml(note.Content, _markdownPipeline);

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<table(.*?)>",
            "<table$1 style='border-collapse: collapse; width: 100%; margin: 1em 0; border: 1px solid #ddd;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<td(.*?)>",
            "<td$1 style='border: 1px solid #ddd; padding: 8px;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<th(.*?)>",
            "<th$1 style='border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2; font-weight: bold;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<tr(.*?)>",
            "<tr$1 style='border-bottom: 1px solid #eee;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<table(.*?)>",
            "<table$1 style='border-collapse: collapse; width: 100%; margin: 1em 0; border: 1px solid #ddd;'>" +
            "<style>tr:hover { background-color: #f5f5f5; }</style>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Apply code block styling
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<pre><code(.*?)>",
            @"<pre style='background-color: #2d2d2d; border-radius: 4px; margin: 1em 0;'><code$1 style='color: #f8f8f2; display: block; padding: 1em; overflow-x: auto; font-family: Consolas, Monaco, 'Andale Mono', monospace;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Apply inline code styling
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<code(?!.*?pre)(.*?)>",
            @"<code$1 style='background-color: #2d2d2d; color: #f8f8f2; padding: 0.2em 0.4em; border-radius: 3px; font-family: Consolas, Monaco, 'Andale Mono', monospace;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)>",
            @"<blockquote$1 style='
            border-left: 4px solid #ccc;
            margin: 1em 0;
            padding: 0.5em 1em;
            background-color: #f9f9f9;
            color: #555;
            font-style: italic;
            position: relative;
        '>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Add quote symbol before blockquotes
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)>",
            @"<blockquote$1><span style='
            content: ""\201C"";
            font-size: 3em;
            color: #ccc;
            position: absolute;
            left: 10px;
            top: -10px;
        '></span>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Style the paragraph inside blockquotes
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)><p>",
            @"<blockquote$1><p style='
            margin: 0.5em 0;
            padding-left: 2em;
        '>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        return new MarkupString(html);
    }

}