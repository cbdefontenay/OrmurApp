@page "/markdown-editor/{SubfolderId:int}"
@page "/markdown-editor/{SubfolderId:int}/{NoteId:int}"
@inject SqliteConnector Db
@layout GoBackLayout
@inject NavigationManager Navigation
@inject IJSRuntime Js
@using CommunityToolkit.Maui.Alerts
@using Markdig
@using Markdown.ColorCode
@using Microsoft.FluentUI.AspNetCore.Components
@using Ormur.Data.Models
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

@if (_subfolder != null)
{
    <div class="editor-container">
        <div class="editor-header">
            <input class="title-input" @bind="_noteTitle" placeholder="Notiz Titel"/>
            <div class="header-actions">
                <button class="save-button" @onclick="SaveNote" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.SpinnerIos())" Color="Color.Lightweight"/>
                        <span>Speichern...</span>
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="Color.Lightweight"/>
                        <span>Speichern</span>
                    }
                </button>
            </div>
        </div>

        <div class="tabs">
            <button class="@(_activeTab == 0 ? "active" : "")" @onclick="() => SetActiveTab(0)">
                Editor
            </button>
            <button class="@(_activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)">
                Vorschau
            </button>
            <button class="@(_activeTab == 2 ? "active" : "")" @onclick="() => SetActiveTab(2)">
                Todos
            </button>
        </div>

        <div class="tab-content">
            @switch (_activeTab)
            {
                case 0:
                    <div class="editor-area">
                        <div class="toolbar">
                            <div class="formatting-buttons">
                                <button @onclick="FormatBold" title="Bold">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextBold())"/>
                                </button>
                                <button @onclick="FormatItalic" title="Italic">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextItalic())"/>
                                </button>
                                <button @onclick="FormatList" title="List Item">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.List())"/>
                                </button>
                                <button @onclick="FormatNumberedList" title="Number list">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextNumberListLtr())"/>
                                </button>
                                <button @onclick="FormatNewLine" title="New Line">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.DocumentPageBreak())"/>
                                </button>
                                <button @onclick="FormatNewAccordion" title="Expander">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextExpand())"/>
                                </button>
                                <button @onclick="FormatBlockquote" title="Quote">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextQuote())"/>
                                </button>
                                <button @onclick="FormatLink" title="Link">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Link())"/>
                                </button>
                                <button @onclick="FormatImage" title="Image">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Image())"/>
                                </button>
                                <button @onclick="FormatCode" title="Code">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Code())"/>
                                </button>
                            </div>
                        </div>
                        <textarea @bind="_markdownText"
                                  @bind:event="oninput"
                                  placeholder="Was hast du im Kopf?"
                                  class="editor-input"
                                  id="editor-input">
                        </textarea>
                    </div>
                    break;
                case 1:
                {
                    <div class="preview-area">
                        <h3>Vorschau:</h3>
                        @if (string.IsNullOrEmpty(_markdownText))
                        {
                            <div class="empty-state">
                                <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" Color="Color.Custom"
                                            CustomColor="var(--primary)"/>
                                <p>Schreibe etwas im Editor, um die Vorschau zu sehen</p>
                            </div>
                        }
                        else
                        {
                            <div class="rendered-content">
                                @((MarkupString)Markdown.ToHtml(_markdownText, _pipeline))
                            </div>
                        }
                    </div>
                    break;
                }
                case 2:
                {
                    <div class="todo-management">
                        <div class="todo-header">
                            <h3>Todos</h3>
                            <button class="add-todo-button" @onclick="ShowAddTodoDialog">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Color="Color.Custom"
                                            CustomColor="var(--on-primary)"/>
                                <span>Neues Todo</span>
                            </button>
                        </div>

                        @if (_todos.Any())
                        {
                            <div class="todo-list">
                                @foreach (var todo in _todos.OrderBy(t => t.Position))
                                {
                                    <div class="todo-item">
                                        <input type="checkbox"
                                               checked="@todo.IsCompleted"
                                               @onchange="(e) => ToggleTodo(todo, e.Value)"/>
                                        <input class="todo-content"
                                               @bind="todo.Content"
                                               @onblur="() => UpdateTodo(todo)"
                                               @onkeydown="(e) => HandleTodoKeyDown(e, todo)"/>
                                        <button class="delete-todo" @onclick="() => DeleteTodo(todo)">
                                            <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                        Value="@(new Icons.Regular.Size20.Delete())"/>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxChecked())"/>
                                <p>Noch keine Todos</p>
                            </div>
                        }
                    </div>
                    break;
                }
            }
        </div>
    </div>
}
else
{
    <div class="loading">
        <FluentProgressRing Color="Color.Success"/>
        <p>Daten werden geladen...</p>
    </div>
}

@if (_showAddTodoDialog)
{
    <div class="modal-backdrop" @onclick="CloseAddTodoDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Todo hinzufügen</h3>
                <button class="icon-button" @onclick="CloseAddTodoDialog">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <input @bind="_newTodoContent"
                           placeholder="Todo Beschreibung"
                           @onkeyup="HandleTodoKeyUp"
                           @ref="_todoInputRef"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseAddTodoDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="AddTodo"
                        disabled="@string.IsNullOrWhiteSpace(_newTodoContent)">
                    Hinzufügen
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SubfolderId { get; set; }
    [Parameter] public int NoteId { get; set; }

    private SubfolderModel? _subfolder;
    private string _markdownText = string.Empty;
    private string _noteTitle = string.Empty;
    private MarkdownPipeline? _pipeline;
    private int _activeTab = 0;
    private bool _showAddTodoDialog = false;
    private string _newTodoContent = string.Empty;
    private bool _isNewNote = true;
    private ElementReference _todoInputRef;
    private List<TodoItemModel> _todos = [];
    private bool _isSaving = false;

    private void FormatBold() => InsertMarkdown("**", "**");
    private void FormatItalic() => InsertMarkdown("*", "*");
    private void FormatNewLine() => InsertMarkdown("</br>", "");
    private void FormatNewAccordion() => InsertMarkdown("<details>\n<summary>Title</summary>\n\n", "</details>");
    private void FormatCode() => InsertMarkdown("```csharp\n", "```");
    private void FormatList() => InsertMarkdown("- ", "");
    private void FormatNumberedList() => InsertMarkdown("1. ", "");
    private void FormatBlockquote() => InsertMarkdown("> ", "");
    private void FormatLink() => InsertMarkdown("[", "](url)");
    private void FormatImage() => InsertMarkdown("![", "](image-url)");

    private void InsertMarkdown(string prefix, string suffix)
    {
        if (string.IsNullOrEmpty(_markdownText))
        {
            _markdownText = prefix + suffix;
        }
        else
        {
            _markdownText += $"{prefix}{suffix}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseColorCode()
            .Build();

        await LoadSubfolderAsync();

        if (NoteId > 0)
        {
            await LoadNoteAsync();
            _isNewNote = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showAddTodoDialog)
        {
            await _todoInputRef.FocusAsync();
        }
    }

    private async Task LoadSubfolderAsync()
    {
        try
        {
            _subfolder = await Db.GetSubfolderAsync(SubfolderId);
            if (_subfolder == null)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subfolder: {ex.Message}");
        }
    }

    private async Task LoadNoteAsync()
    {
        try
        {
            var note = await Db.GetNoteAsync(NoteId);
            if (note != null)
            {
                _noteTitle = note.Title;
                _markdownText = note.Content;
                _todos = await Db.GetTodoItemsByNoteAsync(NoteId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading note: {ex.Message}");
        }
    }

    private void SetActiveTab(int tabIndex)
    {
        _activeTab = tabIndex;
    }

    private void ShowAddTodoDialog()
    {
        _showAddTodoDialog = true;
        _newTodoContent = string.Empty;
    }

    private void CloseAddTodoDialog()
    {
        _showAddTodoDialog = false;
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(_newTodoContent)) return;

        var newTodo = new TodoItemModel
        {
            NoteId = NoteId,
            Content = _newTodoContent,
            IsCompleted = false,
            Position = _todos.Count + 1
        };

        try
        {
            await Db.AddTodoItemAsync(NoteId, _newTodoContent, _todos.Count + 1);
            _todos.Add(newTodo);
            _showAddTodoDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding todo: {ex.Message}");
        }
    }

    private async Task ToggleTodo(TodoItemModel todo, object isChecked)
    {
        var completed = isChecked as bool? ?? false;
        todo.IsCompleted = completed;

        try
        {
            await Task.Delay(1);

            await Db.ToggleTodoItemAsync(todo.Id, completed);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling todo: {ex.Message}");
            todo.IsCompleted = !completed;
            StateHasChanged();
        }
    }

    private async Task UpdateTodo(TodoItemModel todo)
    {
        try
        {
            await Db.DeleteTodoItemAsync(todo.Id);
            await Db.AddTodoItemAsync(todo.NoteId, todo.Content, todo.Position);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating todo: {ex.Message}");
        }
    }

    private async Task DeleteTodo(TodoItemModel todo)
    {
        try
        {
            await Db.DeleteTodoItemAsync(todo.Id);
            _todos.Remove(todo);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting todo: {ex.Message}");
        }
    }

    private void HandleTodoKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = AddTodo();
        }
    }

    private void HandleTodoKeyDown(KeyboardEventArgs e, TodoItemModel todo)
    {
        switch (e.Key)
        {
            case "Enter":
                _ = UpdateTodo(todo);
                break;
            case "Escape":
                break;
        }
    }

    private async Task SaveNote()
    {
        if (_subfolder == null || string.IsNullOrWhiteSpace(_noteTitle)) return;
        _isSaving = true;
        StateHasChanged();
        try
        {
            if (_isNewNote)
            {
                NoteId = await Db.AddNoteAsync(_subfolder.Id, _noteTitle, _markdownText);
                _isNewNote = false;
            }
            else
            {
                await Db.UpdateNoteAsync(NoteId, _noteTitle, _markdownText);
            }

            await Task.Delay(300);
            await Toast.Make("Wurde erfolgreich gespeichert", ToastDuration.Short, 10).Show();

            Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{NoteId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving note: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void FormatText(string formatType)
    {
        var (prefix, suffix) = formatType switch
        {
            "bold" => ("**", "**"),
            "italic" => ("*", "*"),
            "code" => ("`", "`"),
            "codeblock" => ("```\n", "\n```"),
            "list" => ("- ", ""),
            "numberedlist" => ("1. ", ""),
            "blockquote" => ("> ", ""),
            "link" => ("[", "](url)"),
            "image" => ("![", "](image-url)"),
            _ => ("", "")
        };

        if (string.IsNullOrEmpty(_markdownText))
        {
            _markdownText = prefix + suffix;
        }
        else
        {
            _markdownText += $"\n{prefix}{suffix}";
        }

        // In a real implementation, you'd want to focus the textarea here
        // and position the cursor between the formatting marks
    }

}