@page "/markdown-editor/{SubfolderId:int}"
@page "/markdown-editor/{SubfolderId:int}/{NoteId:int}"
@inject SqliteConnector Db
@layout GoBackLayout
@inject NavigationManager Navigation
@inject IJSRuntime Js

@if (_subfolder != null)
{
    <div class="editor-container">
        <div class="editor-header">
            <input class="title-input" @bind="_noteTitle" placeholder="Notiz Titel"/>
            <div class="header-actions">
                <ExportToTxtComponent MarkdownText="@MarkdownText"
                                      NoteTitle="@_noteTitle"
                                      Pipeline="@_pipeline"/>
                <button class="save-button" @onclick="SaveNote" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.SpinnerIos())" Color="Color.Lightweight"/>
                        <span>Speichern...</span>
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="Color.Lightweight"/>
                        <span>Speichern</span>
                    }
                </button>
            </div>
        </div>

        <div class="tabs">
            <button class="@(_activeTab == 0 ? "active" : "")" @onclick="() => SetActiveTab(0)">
                Editor
            </button>
            <button class="@(_activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)">
                Vorschau
            </button>
            <button class="@(_activeTab == 2 ? "active" : "")" @onclick="() => SetActiveTab(2)">
                Todos
            </button>
        </div>

        <div class="tab-content">
            @switch (_activeTab)
            {
                case 0:
                    <div class="editor-area">
                        <div class="toolbar">
                            <div class="formatting-buttons">
                                <button @onclick="FormatBold" title="Bold">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextBold())"/>
                                </button>
                                <button @onclick="FormatItalic" title="Italic">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextItalic())"/>
                                </button>
                                <button @onclick="FormatList" title="List Item">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.List())"/>
                                </button>
                                <button @onclick="FormatNumberedList" title="Number list">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextNumberListLtr())"/>
                                </button>
                                <button @onclick="FormatNewLine" title="New Line">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.DocumentPageBreak())"/>
                                </button>
                                <button @onclick="FormatNewAccordion" title="Expander">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextExpand())"/>
                                </button>
                                <button @onclick="FormatTables" title="Tables">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TableAdd())"/>
                                </button>
                                <button @onclick="FormatBlockquote" title="Quote">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextQuote())"/>
                                </button>
                                <button @onclick="FormatLineThrough" title="Gestriechelt">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TextStrikethrough())"/>
                                </button>
                                <button @onclick="FormatTaskList" title="Todo">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.TaskListAdd())"/>
                                </button>
                                <button @onclick="FormatLink" title="Link">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Link())"/>
                                </button>
                                <button @onclick="FormatImage" title="Image">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Image())"/>
                                </button>
                                <button @onclick="FormatCode" title="Code">
                                    <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                Value="@(new Icons.Regular.Size20.Code())"/>
                                </button>
                            </div>
                        </div>
                        <textarea @bind="MarkdownText"
                                  @bind:event="oninput"
                                  placeholder="Was hast du im Kopf?"
                                  class="editor-input"
                                  id="editor-input">
                        </textarea>
                    </div>
                    break;
                case 1:
                {
                    <div class="preview-area">
                        @if (string.IsNullOrEmpty(MarkdownText))
                        {
                            <div class="empty-state">
                                <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" Color="Color.Custom"
                                            CustomColor="var(--primary)"/>
                                <p>Schreibe etwas im Editor, um die Vorschau zu sehen</p>
                            </div>
                        }
                        else
                        {
                            var html = ProcessHtmlContent(Markdown.ToHtml(MarkdownText, _pipeline));
                            <div class="rendered-content">
                                @((MarkupString)html)
                            </div>
                        }
                    </div>
                    break;
                }
                case 2:
                {
                    <div class="todo-management">
                        <div class="todo-header">
                            <h3>Todos</h3>
                            <button class="add-todo-button" @onclick="ShowAddTodoDialog">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Color="Color.Custom"
                                            CustomColor="var(--on-primary)"/>
                                <span>Neues Todo</span>
                            </button>
                        </div>

                        @if (_todos.Any())
                        {
                            <div class="todo-list">
                                @foreach (var todo in _todos.OrderBy(t => t.Position))
                                {
                                    <div class="todo-item">
                                        <input type="checkbox"
                                               checked="@todo.IsCompleted"
                                               @onchange="(e) => ToggleTodo(todo, e.Value)"/>
                                        <input class="todo-content"
                                               @bind="todo.Content"
                                               @onblur="() => UpdateTodo(todo)"
                                               @onkeydown="(e) => HandleTodoKeyDown(e, todo)"/>
                                        <button class="delete-todo" @onclick="() => DeleteTodo(todo)">
                                            <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                                        Value="@(new Icons.Regular.Size20.Delete())"/>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <FluentIcon Color="Color.Custom" CustomColor="var(--primary)"
                                            Value="@(new Icons.Regular.Size24.CheckboxChecked())"/>
                                <p>Noch keine Todos</p>
                            </div>
                        }
                    </div>
                    break;
                }
            }
        </div>
    </div>
}
else
{
    <div class="loading">
        <FluentProgressRing Color="Color.Success"/>
        <p>Daten werden geladen...</p>
    </div>
}

@if (_showAddTodoDialog)
{
    <div class="modal-backdrop" @onclick="CloseAddTodoDialog">
        <div class="modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Todo hinzufügen</h3>
                <button class="icon-button" @onclick="CloseAddTodoDialog">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"/>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <input @bind="_newTodoContent"
                           placeholder="Todo Beschreibung"
                           @onkeyup="HandleTodoKeyUp"
                           @ref="_todoInputRef"/>
                </div>
            </div>
            <div class="modal-footer">
                <button class="text-button" @onclick="CloseAddTodoDialog">Abbrechen</button>
                <button class="text-button primary" @onclick="AddTodo"
                        disabled="@string.IsNullOrWhiteSpace(_newTodoContent)">
                    Hinzufügen
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SubfolderId { get; set; }
    [Parameter] public int NoteId { get; set; }

    private SubfolderModel? _subfolder;
    private string? MarkdownText { get; set; }
    private string _noteTitle = string.Empty;
    private MarkdownPipeline? _pipeline;
    private int _activeTab = 0;
    private bool _showAddTodoDialog = false;
    private string _newTodoContent = string.Empty;
    private bool _isNewNote = true;
    private ElementReference _todoInputRef;
    private List<TodoItemModel> _todos = [];
    private bool _isSaving = false;

    private async Task FormatBold() => await InsertMarkdown("**", "**");
    private async Task FormatItalic() => await InsertMarkdown("*", "*");
    private async Task FormatNewLine() => await InsertMarkdown("</br>", "");
    private async Task FormatLineThrough() => await InsertMarkdown("~~", "~~");
    private async Task FormatTaskList() => await InsertMarkdown("- [ ]", " Title");
    private async Task FormatNewAccordion() => await InsertMarkdown("<details>\n<summary>Title</summary>\n\n", "\n</details>");
    private async Task FormatCode() => await InsertMarkdown("```\n", "```");
    private async Task FormatList() => await InsertMarkdown("- ", "");

    private async Task FormatNumberedList()
    {
        // First insert the basic numbered list format
        MarkdownText = await Js.InvokeAsync<string>("markdownEditorUtils.insertMarkdownAtCursor", "editor-input", "1. ", "");

        // Then set up the event handler for Enter key
        await Js.InvokeVoidAsync("eval",
            @"document.getElementById('editor-input').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                // Get current line
                const textarea = e.target;
                const startPos = textarea.selectionStart;
                const value = textarea.value;
                let lineStart = value.lastIndexOf('\n', startPos - 1) + 1;
                let lineEnd = value.indexOf('\n', startPos);
                if (lineEnd === -1) lineEnd = value.length;
                const currentLine = value.substring(lineStart, lineEnd);
               
                // Check if it's a numbered list item
                const match = currentLine.match(/^(\s*)(\d+)\.\s/);
                if (match) {
                    e.preventDefault();
                    const spaces = match[1];
                    const num = parseInt(match[2]);
                    const newLine = '\n' + spaces + (num + 1) + '. ';
                    const before = value.substring(0, startPos);
                    const after = value.substring(startPos);
                    textarea.value = before + newLine + after;
                   
                    // Set cursor position
                    const newCursorPos = startPos + newLine.length;
                    textarea.setSelectionRange(newCursorPos, newCursorPos);
                }
            }
        });");
    }

    private async Task FormatBlockquote() => await InsertMarkdown("> ", "");
    private async Task FormatTables() => await InsertMarkdown("| Syntax | Description |\n| --- | ----------- |\n| Header | Title |\n| Paragraph | Text | ", "");
    private async Task FormatLink() => await InsertMarkdown("[", "](url)");
    private async Task FormatImage() => await InsertMarkdown("![", "](image-url)");

    private async Task InsertMarkdown(string prefix, string suffix)
    {
        MarkdownText = await Js.InvokeAsync<string>("markdownEditorUtils.insertMarkdownAtCursor", "editor-input", prefix, suffix);
        // StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UsePipeTables()
            .UseGridTables()
            .Build();

        await LoadSubfolderAsync();

        if (NoteId > 0)
        {
            await LoadNoteAsync();
            _isNewNote = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showAddTodoDialog)
        {
            await _todoInputRef.FocusAsync();
        }
    }

    private async Task LoadSubfolderAsync()
    {
        try
        {
            _subfolder = await Db.GetSubfolderAsync(SubfolderId);
            if (_subfolder == null)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subfolder: {ex.Message}");
        }
    }

    private async Task LoadNoteAsync()
    {
        try
        {
            var note = await Db.GetNoteAsync(NoteId);
            if (note != null)
            {
                _noteTitle = note.Title;
                MarkdownText = note.Content;
                _todos = await Db.GetTodoItemsByNoteAsync(NoteId);
                StateHasChanged(); // Force refresh
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading note: {ex.Message}");
        }
    }

    private void SetActiveTab(int tabIndex)
    {
        _activeTab = tabIndex;
    }

    private void ShowAddTodoDialog()
    {
        _showAddTodoDialog = true;
        _newTodoContent = string.Empty;
    }

    private void CloseAddTodoDialog()
    {
        _showAddTodoDialog = false;
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(_newTodoContent)) return;

        var newTodo = new TodoItemModel
        {
            NoteId = NoteId,
            Content = _newTodoContent,
            IsCompleted = false,
            Position = _todos.Count + 1
        };

        try
        {
            await Db.AddTodoItemAsync(NoteId, _newTodoContent, _todos.Count + 1);
            _todos.Add(newTodo);
            _showAddTodoDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding todo: {ex.Message}");
        }
    }

    private async Task ToggleTodo(TodoItemModel todo, object isChecked)
    {
        try
        {
            var completed = isChecked as bool? ?? false;
            await Db.ToggleTodoItemAsync(todo.Id, completed);
            todo.IsCompleted = completed;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling todo: {ex.Message}");
        }
    }

    private async Task UpdateTodo(TodoItemModel todo)
    {
        try
        {
            await Db.UpdateTodoItemAsync(todo.Id, todo.Content, todo.IsCompleted, todo.Position);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating todo: {ex.Message}");
        }
    }

    private async Task DeleteTodo(TodoItemModel todo)
    {
        try
        {
            await Db.DeleteTodoItemAsync(todo.Id);
            _todos.Remove(todo);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting todo: {ex.Message}");
        }
    }

    private async Task HandleTodoKeyDown(KeyboardEventArgs e, TodoItemModel todo)
    {
        if (e.Key == "Enter")
        {
            await UpdateTodo(todo);
        }
    }

    private async Task HandleTodoKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_newTodoContent))
        {
            await AddTodo();
        }
    }

    private async Task SaveNote()
    {
        if (_subfolder == null || string.IsNullOrWhiteSpace(_noteTitle)) return;
        _isSaving = true;
        StateHasChanged();
        try
        {
            if (_isNewNote)
            {
                NoteId = await Db.AddNoteAsync(_subfolder.Id, _noteTitle, MarkdownText);
                _isNewNote = false;
                // Only navigate if it's a new note
                Navigation.NavigateTo($"/markdown-editor/{SubfolderId}/{NoteId}");
            }
            else
            {
                await Db.UpdateNoteAsync(NoteId, _noteTitle, MarkdownText);
                // Don't navigate if it's an existing note
            }

            await Task.Delay(300);
            await Toast.Make("Wurde erfolgreich gespeichert", ToastDuration.Short, 10).Show();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving note: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private string ProcessHtmlContent(string html)
    {
        // Apply table styling
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<table(.*?)>",
            "<table$1 style='border-collapse: collapse; width: 100%; margin: 1em 0; border: 1px solid #000000;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<(th|td)(.*?)>",
            "<$1$2 style='border: 1px solid #000000; padding: 8px;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<th(.*?)>",
            "<th$1 style='border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2; font-weight: bold;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Apply code block styling
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<pre><code(.*?)>",
            @"<pre style='background-color: #2d2d2d; border-radius: 4px; margin: 1em 0;'><code$1 style='color: #f8f8f2; display: block; padding: 1em; overflow-x: auto; font-family: Consolas, Monaco, 'Andale Mono', monospace;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Apply inline code styling
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<code(?!.*?pre)(.*?)>",
            @"<code$1 style='background-color: #2d2d2d; color: #f8f8f2; padding: 0.2em 0.4em; border-radius: 3px; font-family: Consolas, Monaco, 'Andale Mono', monospace;'>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)>",
            @"<blockquote$1 style='
            border-left: 4px solid #ccc;
            margin: 1em 0;
            padding: 0.5em 1em;
            background-color: var(--on-primary);
            border-radius: 15px;
            color: #555;
            font-style: italic;
            position: relative;
        '>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Add quote symbol before blockquotes
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)>",
            @"<blockquote$1><span style='
            content: ""\201C"";
            font-size: 3em;
            color: #ccc;
            position: absolute;
            left: 10px;
            top: -10px;
        '></span>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Style the paragraph inside blockquotes
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<blockquote(.*?)><p>",
            @"<blockquote$1><p style='
            margin: 0.5em 0;
            padding-left: 2em;
        '>",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        return html;
    }

}